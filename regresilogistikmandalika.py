# -*- coding: utf-8 -*-
"""regresilogistikmandalika.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KEjM6GtJH1Cvw7Kw8LcYDmsg9pCEtQ3q
"""

#import library
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
import seaborn as sn
import matplotlib.pyplot as plt
from google.colab import files 
filenya = files.upload()

#read dataset
import io 
df = pd.read_csv(io.StringIO(filenya['Kuisioner Mandalika (Responses) - Form Responses 6.csv'].decode('utf-8')))
df.head(38)

#Showing row and column
df.shape

#Showing all column
df.columns

#set up variabel independen as x an y as variabel dependen
X = df[['Tanya1','Tanya2','Tanya3', 'Tanya4', 'Tanya5', 'Tanya6', 'Tanya7']]
y = df['Hasil']

#set up train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

#apply logistic regresion formula
logistic_regression = LogisticRegression(solver='liblinear')
logistic_regression.fit(X_train, y_train)
y_pred = logistic_regression.predict(X_test)

#apply Confusion Matrix
confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])
sn.heatmap(confusion_matrix, annot=True)

#show accuracy preccision recall result
print('Accuracy: ', metrics.accuracy_score(y_test, y_pred))
plt.show() 

#TP = True Positive = 9
TP = 8
#TN = Benar Negatif = 1
TN = 2
#FP = Positif Salah = 0
FP = 2
#FN = Negatif Salah =0
FN = 1
#Anda bisa mendapatkan Akurasi menggunakan:
#Ingat bahwa dataset asli (dari langkah 1) memiliki 38 pengamatan. Karena kita menetapkan ukuran pengujian ke 0,25, maka confusion matrix menampilkan hasil untuk 10 baris (= 38 * 0,25). Berikut ini adalah 10 baris uji:
#Akurasi = (TP + TN) / Total = 9 +0) / 10 = 0,9 merupakan rasio prediksi Benar (positif dan negatif) dengan keseluruhan data.
#Oleh karena itu akurasi adalah 70% untuk set tes.

#Precission = (TP) / (TP+FP) merupakan rasio prediksi benar positif dibandingkan dengan keseluruhan hasil yang diprediksi positf.
print('Precision :', (TP)/TP+FP) 

#Recall = (TP) / (TP + FN) merupakan rasio prediksi benar positif dibandingkan dengan keseluruhan data yang benar positif.
print('Recall :', (TP) / (TP + FN))

#Specificity = (TN)/ (TN + FP) merupakan kebenaran memprediksi negatif dibandingkan dengan keseluruhan data negatif.
print('Specifiicity :', (TN)/ (TN + FP))

#F1 Score = 2 * (Recall*Precission) / (Recall + Precission) F1 Score merupakan perbandingan rata-rata presisi dan recall yang dibobotkan
print('F1 Score :', 2 * (0.8 * 3.0) / (0.8 + 3.0))

print(X_test) #test dataset
print(y_pred) #predicted values

accuracyScore = metrics.accuracy_score(y_test,y_pred)
print('Accuracy score : ', accuracyScore)
print("Accuracy in Percentage : ", int(accuracyScore*100),'%')

